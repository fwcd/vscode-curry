<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>fileTypes</key>
  <array>
    <string>icurry</string>
  </array>
  <key>name</key>
  <string>Curry Interface</string>
  <key>patterns</key>
  <array>
    <!-- top level only stuff -->
    <dict>
      <key>begin</key>
      <string>^(interface)\b</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.other.icurry keyword.interface.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\b(where)\b\s*{|(^(?!\s))</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.interface.icurry</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.declaration.interface.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interface_name</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#comments</string>
        </dict>
        <dict>
          <key>match</key>
          <string>[a-z]+</string>
          <key>name</key>
          <string>invalid</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>^(import)\b</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.other.icurry keyword.import.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(^(?!\s))</string>
      <key>name</key>
      <string>meta.import.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\b(qualified|as|hiding)\b</string>
          <key>name</key>
          <string>keyword.other.icurry keyword.import.icurry</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#interface_name</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#module_exports</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#comments</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <string>^\s*(#)\s*\w+</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.preprocessor.c punctuation.pragma.preprocessor.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>$</string>
      <key>comment</key>
      <string>In addition to icurry's "native" syntax, GHC permits the C preprocessor to be run on a source file.</string>
      <key>name</key>
      <string>meta.preprocessor.c pragma.preprocessor.icurry</string>
    </dict>
    <dict>
      <key>include</key>
      <string>#pragma</string>
    </dict>
    <!-- declarations and so on -->
    <dict>
      <key>begin</key>
      <string>^(foreign)\s+(import|export)((\s+\w+))(\s+\"(\\.|[^\"])*\")?\s*</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.declaration.foreign.icurry</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>keyword.declaration.foreign.icurry</string>
        </dict>
        <key>3</key>
        <dict>
          <key>name</key>
          <string>keyword.declaration.foreign.icurry</string>
        </dict>
        <key>5</key>
        <dict>
          <key>name</key>
          <string>string.quoted.double.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>^(?!\s)</string>
      <key>name</key>
      <string>meta.function.foreign-declaration.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#foreign_function_signature</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>include</key>
      <string>#type_declarations</string>
    </dict>
    <dict>
      <key>include</key>
      <string>#function_declarations</string>
    </dict>
    <dict>
      <key>include</key>
      <string>#expression_stuff</string>
    </dict>
  </array>
  <key>repository</key>
  <dict>
    <key>block_comment</key>
    <dict>
      <key>applyEndPatternLast</key>
      <integer>1</integer>
      <key>begin</key>
      <string>\{-(?!#)</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.comment.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?&lt;!#)-\}</string>
      <!-- ^ Using `(?&lt;!#)-\}` instead of `-\}` so that pragmas don't close block comments. `(?<!#)-}` is a negative lookbehind saying: match `-}` but not when there's a `#` in front of it. -->
      <key>name</key>
      <string>comment.block.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#block_comment</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#comments</string>
        </dict>
      </array>
    </dict>
    <key>comments</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.comment.icurry</string>
            </dict>
          </dict>
          <key>match</key>
          <string>(---*(?!([!#\$%&amp;\*\+\./&lt;=&gt;\?@\\\^\|\-~:]|[^[^\p{S}\p{P}]_"'\(\),;\[\]`\{}]))).*$\n?</string> 
          <!-- The difficulty is to forbid things that create valid operators. -->
          <!-- OK, now the explanation: -->
          <!-- First, we match "dashes": plus any number of further dashes. -->
          <!-- We now have to match "any⟨symbol⟩": match any characters that's not "symbol". -->
          <!--   symbol → ascSymbol | uniSymbol⟨special | _ | " | '⟩ -->
          <!-- we forbid those two with a negative lookahead: -->
          <!-- - first forbid the "ascSymbol" symbols !#$%&*+./<=>?@\^|-~: -->
          <!--   using [!#\$%&amp;\*\+\./&lt;=&gt;\?@\\\^\|\-~:] -->
          <!-- - then we forbid "uniSymbol⟨special | _ | " | '⟩": all unicode symbols apart from a few. -->
          <!--   Sublime's regex engine does not allow "Character Class Subtraction", so instead we have to use "double-negative" (http://stackoverflow.com/a/3469155/263061): class-chars can be expressed as [^[^class]chars] -->
          <!--   Here, class is [\p{S}\p{P}] ("uniSymbol": "any Unicode symbol or punctuation") -->
          <!--   and chars is _"'\(\),;\[]`\{} (the _"' defined in "symbol", and "special") -->
          <!--   So using the "double-negative", we get: -->
          <!--     [^[^\p{S}\p{P}]_"'\(\),;\[\]`\{}] -->
          <!-- Done. Now we just eat everything until the end of the line. -->
          <!-- Other relevant info: -->
          <!-- Chars that have to be escaped in Sublime's regex engine: \^$.|?*+()[]{- -->
          <key>name</key>
          <string>comment.line.icurry</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#block_comment</string>
        </dict>
      </array>
    </dict>
    <key>infix_op</key>
    <dict>
      <key>match</key>
      <string>(\([^\w \)]+\)|\(,+\))</string>
      <key>name</key>
      <string>keyword.operator.icurry</string>
    </dict>
    <key>interface_name</key>
    <dict>
      <key>match</key>
      <string>([A-Z][\w']*)(\.[A-Z][\w']*)*</string>
      <key>name</key>
      <string>storage.interface.icurry</string>
    </dict>
    <key>pragma</key>
    <dict>
      <key>begin</key>
      <string>(\{-#)\s+([A-Z_]+)\b</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.pragma.icurry</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>keyword.preprocessor.icurry pragma.name.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>#-\}</string>
      <key>name</key>
      <string>pragma.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\b([A-Z][a-z]*)+\b</string>
          <key>name</key>
          <string>keyword.other.preprocessor.icurry pragma.support.language.icurry</string>
        </dict>
        <dict>
          <key>match</key>
          <string>(-+[a-z]+)+</string>
          <key>name</key>
          <string>keyword.other.preprocessor.icurry pragma.support.flag.icurry</string>
        </dict>
      </array>
    </dict>
    <key>common_keywords</key>
    <dict>
      <key>match</key>
      <string>\b(where|case|fcase|of|let|in|default|do|mdo|if|then|else|free)\b</string>
      <key>name</key>
      <string>keyword.other.icurry</string>
    </dict>
    <key>literals</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>comment</key>
          <string>Floats are always decimal</string>
          <key>match</key>
          <string>\b([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\b</string>
          <key>name</key>
          <string>constant.numeric.icurry</string>
        </dict>
        <dict>
          <key>match</key>
          <string>\b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\b</string>
          <key>name</key>
          <string>constant.numeric.icurry</string>
        </dict>
        <dict>
          <key>begin</key>
          <string>"</string>
    <!--      <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.icurry</string>
            </dict>
          </dict>
     -->      <key>end</key>
          <string>"</string>
    <!--      <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.icurry</string>
            </dict>
          </dict>
     -->      <key>name</key>
          <string>string.quoted.double.icurry</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>match</key>
              <string>\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"'\&amp;])</string>
              <key>name</key>
              <string>constant.character.escape.icurry</string>
            </dict>
            <dict>
              <key>match</key>
              <string>\\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+</string>
              <key>name</key>
              <string>constant.character.escape.octal.icurry</string>
            </dict>
            <dict>
              <key>match</key>
              <string>\^[A-Z@\[\]\\\^_]</string>
              <key>name</key>
              <string>constant.character.escape.control.icurry</string>
            </dict>
          </array>
        </dict>
        <dict>
          <key>captures</key>
          <dict>
    <!--        <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.icurry</string>
            </dict>
     -->        <key>2</key>
            <dict>
              <key>name</key>
              <string>constant.character.escape.icurry</string>
            </dict>
            <key>3</key>
            <dict>
              <key>name</key>
              <string>constant.character.escape.octal.icurry</string>
            </dict>
            <key>4</key>
            <dict>
              <key>name</key>
              <string>constant.character.escape.hexadecimal.icurry</string>
            </dict>
            <key>5</key>
            <dict>
              <key>name</key>
              <string>constant.character.escape.control.icurry</string>
            </dict>
    <!--        <key>6</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.icurry</string>
            </dict>
     -->      </dict>
          <key>match</key>
          <string>(?x)
          (')
          (?:
            [\ -&amp;(-\[\]-~"]               # Basic Char
            | (\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE
              |DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS
              |US|SP|DEL|[abfnrtv\\\"'\&amp;]))   # Escapes
            | (\\o[0-7]+)               # Octal Escapes
            | (\\x[0-9A-Fa-f]+)           # Hexadecimal Escapes
            | (\^[A-Z@\[\]\\\^_])           # Control Chars
          )
          (')
          </string>
          <key>name</key>
          <string>string.quoted.single.icurry</string>
        </dict>
      </array>
    </dict>
    <key>type</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>-&gt;|→</string>
          <key>name</key>
          <string>keyword.operator.arrow.icurry</string>
        </dict>
        <dict>
          <key>match</key>
          <string>=&gt;|⇒</string>
          <key>name</key>
          <string>keyword.operator.big-arrow.icurry</string>
        </dict>
        <dict>
          <key>match</key>
          <string>\b(Int(eger)?|Maybe|Either|Bool|Float|Double|Char|String|Ordering|ShowS|ReadS|FilePath|IO(Error)?)\b</string>
          <key>name</key>
          <string>storage.type.icurry support.type.icurry</string>
        </dict>
        <dict>
          <key>match</key>
          <string>(?&lt;!')\b[a-z][\w']*\b</string>
          <key>name</key>
          <string>variable.generic.icurry</string>
        </dict>
        <dict>
          <key>match</key>
          <string>(?&lt;!')\b[A-Z][\w']*\b</string>
          <key>name</key>
          <string>storage.type.icurry</string>
        </dict>
        <dict>
          <key>match</key>
          <string>\(\)</string>
          <key>name</key>
          <string>storage.type.icurry</string>
        </dict>
        <dict>
          <key>begin</key>
          <string>(\()</string>
          <key>beginCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>keyword.operator.icurry</string>
            </dict>
          </dict>
          <key>end</key>
          <string>(\))</string>
          <key>endCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>keyword.operator.icurry</string>
            </dict>
          </dict>
          <key>name</key>
          <string>meta.type_signature.brace.icurry</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#type</string>
            </dict>
          </array>
        </dict>
        <dict>
          <key>begin</key>
          <string>(\[)</string>
          <key>beginCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>keyword.operator.icurry</string>
            </dict>
          </dict>
          <key>end</key>
          <string>(\])</string>
          <key>endCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>keyword.operator.icurry</string>
            </dict>
          </dict>
          <key>name</key>
          <string>meta.type_signature.list.icurry</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#type</string>
            </dict>
          </array>
        </dict>
        <dict>
          <key>include</key>
          <string>#comments</string>
        </dict>
      </array>
    </dict>
    <key>function_signature</key>
    <dict>
      <key>begin</key>
      <!--
      SublimeText2 workaround
      If begin doesn't capture anything (using only lookaheads), then end tries match just from the beginning
      And it cause infinite loop in case of function with no indentation (so there's nothing matched)
      SublimeText3 works well in that case

      We also can't match full name of function, because there're cases with several names:
        * x, y, z :: Int
        * [x, y, z] :: [Int]

      Therefore we are just trying to much something: name, open bracket etc.
      And we match other stuff within patterns
      -->
      <!-- replaced two '-' below with '- -' in order to parse with xml.etree module -->
      <!-- <string>^(\s*)(?!- -)(?=([\w\s,']*|\(.*\)|\[.*\])\s+((::)|∷))</string> -->
      <string>^(\s*)(?!--)(?:(\(\W\)|[\w']+)|[\(\[])(?=[\w',\s\[\]\(\)]*((?:::)|∷))</string>
      <key>beginCaptures</key>
      <dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>entity.name.function.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>^(?!\1\s)|(?=})</string>
      <key>name</key>
      <string>meta.declaration.function.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?=.*((::)|∷))</string>
          <key>end</key>
          <string>((::)|∷)</string>
          <key>endCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>keyword.other.double-colon.icurry</string>
            </dict>
          </dict>
          <key>name</key>
          <string>meta.declaration.function.names.icurry</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>match</key>
              <string>((?&lt;!')\b[a-z_][\w']*|\(\W+\))</string>
              <key>name</key>
              <string>entity.name.function.icurry</string>
            </dict>
          </array>
        </dict>
        <dict>
          <key>include</key>
          <string>#type</string>
        </dict>
      </array>
    </dict>
    <key>function_definition</key>
    <dict>
      <key>begin</key>
      <string>^\s*(?&lt;!')\b([a-z_][\w']*|\(\W+\))\s+(?![^\w\s='"\(\[])(?=((([\w\.,'"_]+|(?:\w+\@)?\(.*\)|\[.*\])\s+)*[=\|]))</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>entity.name.function.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(=)</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.operator.icurry</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.definition.function.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#expression_stuff</string>
        </dict>
      </array>
    </dict>
    <key>infix_function_definition</key>
    <dict>
      <key>begin</key>
      <string>^\s*(?=(([\w'\.'"]+|(?:\w+@)?\(.*\)|\[.*\])\s+)+([^"'_,\(\);\[\]`\{\}\:\w\s]+|`[a-z][\w']*`)((\s*[\w'\.'"]+|\s*(?:\w+@)?\(.*\)|\s*\[.*\]))+\s*=)</string>
      <key>end</key>
      <string>( [^"'_,\(\);\[\]`\{\}\:\w\s]+|`[a-z][\w']*`)</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>entity.name.function.icurry</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.definition.function.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#expression_stuff</string>
        </dict>
      </array>
    </dict>
    <key>pattern_function_definition</key>
    <dict>
      <key>begin</key>
      <string>^\s*(?=\(.*\)|\[.*\]|([A-Z][\w']*(\s+([\w\s,']*|\(.*\)|\[.*\]|\{.*\}))*)\s*=)</string>
      <key>end</key>
      <string>(=)</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.operator.icurry</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.definition.function.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>(?&lt;!')\b([a-z_][\w']*)\b</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>entity.name.function.icurry</string>
            </dict>
          </dict>
        </dict>
        <dict>
          <key>include</key>
          <string>#expression_stuff</string>
        </dict>
      </array>
    </dict>
    <key>foreign_function_signature</key>
    <dict>
      <key>begin</key>
      <string>(\s*)([a-z_][\w']*|\(\W+\))\s*((::)|∷)</string>
      <key>beginCaptures</key>
      <dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>entity.name.function.icurry</string>
        </dict>
        <key>3</key>
        <dict>
          <key>name</key>
          <string>keyword.other.double-colon.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>^(?!\s)</string>
      <key>name</key>
      <string>meta.declaration.function.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#type</string>
        </dict>
      </array>
    </dict>
    <key>constructor_signature</key>
    <dict>
      <key>begin</key>
      <string>^(\s+)([A-Z][\w']*|\(\W+\))\s*((::)|∷)</string>
      <key>beginCaptures</key>
      <dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>constant.other.icurry entity.name.constructor.icurry</string>
        </dict>
        <key>3</key>
        <dict>
          <key>name</key>
          <string>keyword.other.double-colon.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>^(?!\1\s)</string>
      <key>name</key>
      <string>meta.declaration.function.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#type</string>
        </dict>
      </array>
    </dict>
    <key>record_declaration</key>
    <dict>
      <key>begin</key>
      <string>(\{)(?!-)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.operator.icurry punctuation.record.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?&lt;!-)(\})</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.operator.icurry punctuation.record.icurry</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.declaration.record.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#field_signature</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#comments</string>
        </dict>
      </array>
    </dict>
    <key>field_signature</key>
    <dict>
      <key>begin</key>
      <string>(?=.*?((::)|∷))</string>
      <key>end</key>
      <string>(?=[,}])</string>
      <key>name</key>
      <string>meta.declaration.field.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>((::)|∷)</string>
          <key>beginCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>keyword.other.double-colon.icurry</string>
            </dict>
          </dict>
          <key>end</key>
          <string>(?=[,}])</string>
          <key>name</key>
          <string>meta.declaration.field.signature.icurry</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#type</string>
            </dict>
          </array>
        </dict>
        <dict>
          <key>match</key>
          <string>((?&lt;!')\b[a-z_][\w']*|\(\W+\))</string>
          <key>name</key>
          <string>entity.name.function.icurry</string>
        </dict>
      </array>
    </dict>
    <key>deriving</key>
    <dict>
      <key>match</key>
      <string>\b(deriving)\b</string>
      <key>name</key>
      <string>keyword.other.icurry keyword.declaration.data.icurry</string>
    </dict>
    <key>type_declaration</key>
    <dict>
      <key>begin</key>
      <string>^(\s*)(type)\s+([A-Z][\w']*)?</string>
      <key>beginCaptures</key>
      <dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>keyword.declaration.data.icurry</string>
        </dict>
        <key>3</key>
        <dict>
          <key>name</key>
          <string>constant.other.icurry entity.name.type.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>^(?!\1\s)</string>
      <key>name</key>
      <string>meta.declaration.type.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#comments</string>
        </dict>
        <dict>
          <key>match</key>
          <string>=</string>
          <key>name</key>
          <string>keyword.operator.icurry</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#type</string>
        </dict>
      </array>
    </dict>
    <key>data_declaration</key>
    <dict>
      <key>begin</key>
      <string>^(\s*)(data|newtype)\s+([A-Z][\w']*)?</string>
      <key>beginCaptures</key>
      <dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>keyword.declaration.data.icurry</string>
        </dict>
        <key>3</key>
        <dict>
          <key>name</key>
          <string>constant.other.icurry entity.name.type.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>^(?!\1\s)</string>
      <key>name</key>
      <string>meta.declaration.data.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>where</string>
          <key>name</key>
          <string>keyword.declaration.data.icurry</string>
        </dict>
        <dict>
          <key>begin</key>
          <string>([=\|])</string>
          <key>beginCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>keyword.operator.icurry</string>
            </dict>
          </dict>
          <key>end</key>
          <string>(?&lt;!')\b([A-Z][\w']*)</string>
          <key>endCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>constant.other.icurry entity.name.constructor.icurry</string>
            </dict>
          </dict>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#comments</string>
            </dict>
          </array>
        </dict>
        <dict>
          <key>include</key>
          <string>#deriving</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#constructor_signature</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#record_declaration</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#comments</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#type</string>
        </dict>
      </array>
    </dict>
    <key>class_declaration</key>
    <dict>
      <key>begin</key>
      <string>^(\s*)(class)\b</string>
      <key>beginCaptures</key>
      <dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>keyword.declaration.class.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\b(where)\b|(^(?!\1\s))</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.declaration.class.icurry</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.declaration.class.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#type</string>
        </dict>
      </array>
    </dict>
    <key>instance_declaration</key>
    <dict>
      <key>begin</key>
      <string>^(\s*)(instance)\b</string>
      <key>beginCaptures</key>
      <dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>keyword.declaration.instance.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\b(where)\s*{\b|(^(?!\1\s))</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.declaration.instance.icurry</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.declaration.instance.icurry</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#type</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#comments</string>
        </dict>
      </array>
    </dict>
    <key>fixity_declaration</key>
    <dict>
      <key>match</key>
      <string>\binfix[lr]?\b</string>
      <key>name</key>
      <string>keyword.declaration.fixity.icurry</string>
    </dict>
    <key>function_declarations</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#function_signature</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#function_definition</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#infix_function_definition</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#fixity_declaration</string>
        </dict>
      </array>
    </dict>
    <key>type_declarations</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#data_declaration</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#type_declaration</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#class_declaration</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#instance_declaration</string>
        </dict>
      </array>
    </dict>
    <key>quasi_quote</key>
    <dict>
      <key>begin</key>
      <string>(\[)([a-z]\w*)?(\|)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.quasi-quoter.icurry keyword.operator.icurry</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>entity.name.function.icurry</string>
        </dict>
        <key>3</key>
        <dict>
          <key>name</key>
          <string>punctuation.quasi-quoter.icurry keyword.operator.icurry</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(\|\])</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.quasi-quoter.icurry keyword.operator.icurry</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.quasi.icurry</string>
    </dict>
    <key>ctor_names</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>(?&lt;!')\b[A-Z][\w']*</string>
          <key>name</key>
          <string>constant.other.icurry entity.name.constructor.icurry</string>
        </dict>
        <dict>
          <key>match</key>
          <string>\(\)</string>
          <key>name</key>
          <string>constant.other.icurry entity.name.constructor.icurry</string>
        </dict>
      </array>
    </dict>
    <key>expression_stuff</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>([A-Z][\w']*\.)+</string>
          <key>name</key>
          <string>storage.interface.icurry entity.name.interface.icurry</string>
        </dict>
        <dict>
          <key>match</key>
          <string>\b(abs|acos|acosh|all|and|any|appendFile|asTypeOf|asin|asinh|atan|atan2|atanh|break|ceiling|compare|concat|concatMap|const|cos|cosh|icurry|cycle|decodeFloat|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromEnum|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|head|id|init|interact|ioError|isDenormalized|isIEEE|isInfinite|isNaN|isNegativeZero|iterate|last|lcm|length|lex|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|odd|or|otherwise|pi|pred|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|read|readFile|readIO|readList|readLn|readParen|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showList|showParen|showString|shows|showsPrec|significand|signum|sin|sinh|snd|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|toEnum|toInteger|toRational|truncate|uncurry|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b</string>
          <key>name</key>
          <string>support.function.prelude.icurry</string>
        </dict>
        <dict>
          <key>match</key>
          <string>\b(error|undefined)\b</string>
          <key>name</key>
          <string>support.function.prelude.icurry invalid.icurry</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#infix_op</string>
        </dict>
        <dict>
          <key>comment</key>
          <string>List</string>
          <key>match</key>
          <string>\[|\]</string>
          <key>name</key>
          <string>keyword.operator.icurry punctuation.list.icurry</string>
        </dict>
        <dict>
          <key>match</key>
          <string>,</string>
          <key>name</key>
          <string>punctuation.separator.comma.icurry</string>
        </dict>
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.entity.icurry</string>
            </dict>
            <key>3</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.entity.icurry</string>
            </dict>
          </dict>
          <key>comment</key>
          <string>In case this regex seems unusual for an infix operator, note that icurry allows any ordinary function application (elem 4 [1..10]) to be rewritten as an infix expression (4 `elem` [1..10]).</string>
          <key>match</key>
          <string>(`)([A-Z][\w']*\.)*[a-z][\w']*(`)</string>
          <key>name</key>
          <string>keyword.operator.function.infix.icurry</string>
        </dict>
        <dict>
          <key>begin</key>
          <string>(\{)(?!-)</string>
          <key>beginCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>keyword.operator.icurry punctuation.record.icurry</string>
            </dict>
          </dict>
          <key>end</key>
          <string>(?&lt;!-)(\})</string>
          <key>endCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>keyword.operator.icurry punctuation.record.icurry</string>
            </dict>
          </dict>
          <key>name</key>
          <string>record.expression.icurry</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>match</key>
              <string>(?&lt;!')\b[a-z][\w']+\s+(=)</string>
              <key>captures</key>
              <dict>
                <key>2</key>
                <dict>
                  <key>name</key>
                  <string>keyword.operator.icurry</string>
                </dict>
              </dict>
            </dict>
            <dict>
              <key>include</key>
              <string>#expression_stuff</string>
            </dict>
          </array>
        </dict>
        <dict>
          <key>match</key>
          <string>\(\)</string>
          <key>name</key>
          <string>constant.other.icurry entity.name.constructor.icurry</string>
        </dict>
        <dict>
          <key>match</key>
          <string>\[\]</string>
          <key>name</key>
          <string>constant.other.icurry entity.name.constructor.icurry</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#comments</string>
        </dict>
        <dict>
          <key>comment</key>
          <string>In case this regex seems overly general, note that icurry permits the definition of new operators which can be nearly any string of punctuation characters, such as $%^&amp;*.</string>
          <key>match</key>
          <string>[@|!%$?~+:.\-*=&lt;/&gt;\\∘→⇒⇔←⇐≤≥≡⋮\[\]]+</string>
          <key>name</key>
          <string>keyword.operator.icurry</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#common_keywords</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#literals</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#quasi_quote</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#ctor_names</string>
        </dict>
      </array>
    </dict>
  </dict>
  <key>scopeName</key>
  <string>source.icurry</string>
</dict>
</plist>
